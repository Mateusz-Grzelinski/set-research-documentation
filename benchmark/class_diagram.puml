
@startuml

package "Benchmark blackbox" {
  TestInput <|-- LFG : implements
  TestInput <|-- TPTPFiles : implements
  TestCase --* TestSuite
  TPTPStream --o TestCase
  TestSuite o-- TestInput
  TestSuite *-- Parser
  TestSuite --* Benchmark
  Parser <|-- Prover9Parser : extends
  Parser <|-- SPASSParser : extends
  TPTPStream o-- SATStatistics
  SATType -- SATStatistics
  Parser - ParserToExecutable

  Statistics -- Benchmark
  SATStatistics -- TestStatistics
  TestStatistics -- Statistics
  HardwareStatistics -- Statistics

  Main *-- Config
  Main *-- Logger
  Main *-- Benchmark

  Enum SATType {
  FOF
  CNF
  TFF
  TCF
  }

  Enum ParserToExecutable {
  SPASSParser="spass"
  Prover9Parser="prover9"
  }
}

class Main {
- log : Logger
- config : Config
- benchmark : Benchmark
+ void main()
}

class Logger {
- verbosity: int
- log_file: string
}

abstract class TestInput <<interface>> {
+ getTestCase() : TPTPStream
}

class TPTPFiles {
- paths : string[]
+ TPTPFiles(string[] paths)
+ getTestCase() : TPTPStream
}

class LFG {
- seed : int
TODO
+ getTestCase() : TPTPStream
}

class TPTPStream <<extends stream>>{
- stats : SATStatistics
+ getSATStatistics() : SATStatistics
}


class Statistics <<serializable>> {
- program_name : string
- program_version : string
- date
- hardware : HardwareStatistics
- tests : TestStatistics[]
}

class HardwareStatistics <<serializable>> {
- operating_system
- system_version
- cpu
- memory
- disk?
}

class TestStatistics <<serializable>> {
- name : string
- options : string[]
- input : string
- memory_usage : int
- cpu_time : int
- execution_time : int
- sat : SATStatistics
}

class SATStatistics <<serializable>> {
- name : string
- SAT_type : SATType
- number_of_clauses : int
- number_of_atoms : int
- maximal_clause_size : int
- number_of_predicates : int
- number_of_functors : int
- number_of_variables : int
- maximal_term_depth : int
}

abstract class Parser  {
+ {abstract} parseOutput(stream output) : TODO
+ matchParser(string executable, ParserToExecutable translation_table) : Parser
}

class Prover9Parser {
+ parseOutput(stream output) : TODO
}

class SPASSParser {
+ parseOutput(stream output) : TODO
}

class TestCase {
- input_stream : TPTPStream
- input_after_option : string
- output_path : string
- name : string
- options : string[]

+ TestCase()
+ run(executable : string, aditional_options : string , parser : Parser) : Statistics[]
}

class TestSuite {
- executable : string
- PATH : string
- options : string
- parser : Parser
- test_cases : TestCase[]
- test_inputs : TestInput[]

+ TestSuite(PATH: string, test_cases: TestCase[] )
+ run() : Statistics[]
}

class Config {
- config_file_path : string
- configs : dict
- verifyConfig() : void

+ Config(config_file_path: string)
+ readConfigFile() : void
}

class Benchmark {
- test_suite :  TestSuite[]
- output_dir : string
- override_output : bool
- stats :  Statistics[]
+ Benchmark(test_suite: TestSuite)
+ run() : void
}

@enduml

