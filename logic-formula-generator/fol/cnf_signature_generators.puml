@startuml
skinparam dpi 300

skinparam class {
  backgroundColor Ivory
  borderColor DarkRed
}

package SubGenerators {
  CNFFormulaGenerator o-- CNFClauseGenerator
  CNFClauseGenerator o-- LiteralGenerator
  LiteralGenerator o-- AtomGenerator
  AtomGenerator o-- PredicateGenerator
  AtomGenerator o-- VariableGenerator
  AtomGenerator o-- FunctorGenerator
  PredicateGenerator o-- VariableGenerator
  PredicateGenerator o-- FunctorGenerator
  VariableGenerator -o FunctorGenerator
}

note "Provides random\nPredicates: p, p(f), p(V, f)" as N
PredicateGenerator - N

class CNFFormulaGenerator {
	+ generate() 
}
note right of CNFFormulaGenerator: Provides random\nCNFFormula: cnf/1, cnf/2

class CNFClauseGenerator {
  clause_lengths
	+ generate() 
}
note right of CNFClauseGenerator: Provides random\nCNFClause: cnf(literal | literal).

class LiteralGenerator {
  negation_change
	+ generate() 
}
note right of LiteralGenerator: Provides random\nLiteral: atom, ~atom

class AtomGenerator {
  connectives
	+ generate() 
}
note right of AtomGenerator: Provides random\nAtom: p, V = V, f != V

class PredicateGenerator {
	arities
  predicate_names
	+ generate() 
}

class FunctorGenerator {
  max_recursion_depth
  arities
  functor_names
	+ generate() 
}
note bottom of FunctorGenerator: Provides random\nFunctors: f, f(f), f(V), f(f(f))

class VariableGenerator {
  variable_names
	+ generate() 
}
note bottom of VariableGenerator: Provides random\nVariables: V1, V2

@enduml
