@startuml

package "Benchmark blackbox" {
TestCase --* TestSuite
TestSuite o-- TestInput
TestInput *-- Translator
TestSuite *-- Parser
TestSuite --o Benchmark
Parser <|-- Prover9Parser : implements
Parser <|-- SPASSParser : implements
SATType - SATStatistics
TestSuite - ParserToExecutable

Statistics --* Benchmark
HardwareStatistics --o Benchmark
SATStatistics -- TestCaseStatistics
SATStatistics -o TestSuite
TestCaseStatistics -- Statistics
HardwareStatistics - Statistics

Config *-- Main
Logger *-- Main
Benchmark *-- Main

OutStatistics . Parser
OutStatistics <|-- Prover9Statistics : extends
OutStatistics <|-- SPASStatistics : extends
SATStatus - OutStatistics
TestCaseStatistics *-- OutStatistics

TestCaseStatistics - TestSuiteStatistics
TestSuiteStatistics -o TestSuite


' for formating
OutStatistics -[hidden]- HardwareStatistics
SPASStatistics -[hidden]- HardwareStatistics
}

enum SATType {
  FOF
  CNF
  TFF
  TCF
}

enum ParserToExecutable {
  SPASSParser="spass"
  Prover9Parser="prover9"
}

enum SATStatus {
  satisfiable
  unsatisfiable
  error
}


class Main {
  - log : Logger
  - config : Config
  - benchmark : Benchmark
  - output_dir : string
  + main() : void
}

class Logger {
  - verbosity: int
  - log_file: string
}

class TestInput {
  - format : string
  - {static} translators : Translator[]
  + getTestCase(translators: Translator[]) : string
  + getInputStatistics() : SATStatistics
  + translate(from: string, to: string) : string
  + as(format: string) : string
}

abstract class Translator {
  - from : string
  - to : string
  + {static} translate(path: string): string
}

class Statistics <<serializable>> {
  - date
  - suites : TestSuiteStatistics[]
  - hardware : HardwareStatistics
}

class TestCaseStatistics <<serializable>> {
  - name : string
  - options : string[]
  - peak_memory : int
  - cpu_time : int
  - execution_time : int
  - input : SATStatistics
  - output : OutStatistics
}

class TestSuiteStatistics <<serializable>> {
  - program_name : string
  - program_version : string
  - test_cases : TestCaseStatistics[]
}

class HardwareStatistics <<serializable>> {
  - operating_system
  - system_version
  - cpu
  - memory
  - disk
  + {static} getHardwareStatistics() : HardwareStatistics
}

class SATStatistics <<serializable>> {
  - name : string
  - SAT_type : SATType
  - number_of_clauses : int
  - number_of_atoms : int
  - maximal_clause_size : int
  - number_of_predicates : int
  - number_of_functors : int
  - number_of_variables : int
  - maximal_term_depth : int
}

class OutStatistics <<serializable>> {
  - SAT : SATStatus
  - error : string
}

class Prover9Statistics <<serializable>> {
}

class SPASStatistics <<serializable>> {
}

abstract class Parser <<interface>> {
  + parse(output : stream) : OutStatistics
}

class Prover9Parser {
  + parse(output : stream) : OutStatistics
}

class SPASSParser {
  + parse(output : stream) : OutStatistics
}

class TestCase {
  - name : string
  - options : string[]
  - format : string
  - input_as_last_argument : bool
  - input_after_option : string
  - include_ony : string[]
  - exclude : string[]

  + run(executable : string, PATH: string, aditional_options : string, parser : Parser, test_input: TestInput) : TestCaseStatistics[]
}

class TestSuite {
  - name : string
  - executable : string
  - PATH : string
  - version : string
  - options : string[]
  - parser : Parser
  - test_cases : TestCase[]
  - test_inputs : TestInput[]

  - matchParser(string executable) : Parser
  + run() : TestSuiteStatistics
}

class Config {
  - config_file_path : string
  - test_suites : TestSuite []
  - test_inputs : TestInput []
  - test_cases : TestCase []
  - translators : Translator []

  - load_config() : void
}

class Benchmark {
  - test_suite :  TestSuite[]
  - override_output : bool
  - statistics :  Statistics[]
  - hardware_statistics :  HardwareStatistics
  + run() : void
}

@enduml

